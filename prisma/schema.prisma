generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  user
  admin
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  completed   Boolean  @default(false)
  urgency     Urgency? @default(MEDIUM)
  userId      Int
  assignedById Int?    // Who assigned this task
  projectId   Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  AssignedBy User? @relation("TaskAssignedBy", fields: [assignedById], references: [id], onDelete: SetNull)
  Project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String?  // Nullable for OAuth users
  salt      String?  // Nullable for OAuth users
  role      Role     @default(user)
  createdAt DateTime @default(now())
  
  projects Project[]
  tasks    Task[]
  assignedTasks Task[] @relation("TaskAssignedBy")
  comments Comment[]
  mentions Mention[]
  notifications Notification[]
}

model Project {
  id     Int    @id @default(autoincrement())
  title  String
  clientId Int?
  body   String
  userId Int
  milestone   DateTime?
  mbaNumber String @default("")
  coFileNumbers String @default("")
  dldReviewer String @default("")
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientRef Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  comments Comment[]
  tasks Task[]
  milestones Milestone[]
}

model Milestone {
  id        Int      @id @default(autoincrement())
  date      DateTime
  item      String
  completed Boolean  @default(false)
  projectId Int
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id     Int    @id @default(autoincrement())
  email  String
  body   String
  projectId Int?
  taskId Int?
  userId Int
  createdAt DateTime @default(now())

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentions Mention[]
}

model Mention {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    Int
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@unique([commentId, userId])
}

model Notification {
  id         Int      @id @default(autoincrement())
  mentionId  Int
  userId     Int
  type       String   // 'mention'
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  mention Mention @relation(fields: [mentionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id          Int      @id @default(autoincrement())
  name        String
  companyName String?
  email       String
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects Project[]
}
