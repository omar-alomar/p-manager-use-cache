// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  completed   Boolean  @default(false)
  userId      Int
  projectId   Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
} 

enum Role {
  user
  admin
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String?  // Nullable for OAuth users
  salt      String?  // Nullable for OAuth users
  role      String   @default("user")
  createdAt DateTime @default(now())
  
  projects Project[]
  tasks    Task[]
  comments Comment[]
}

model Project {
  id     Int    @id @default(autoincrement())
  title  String
  clientId Int?
  body   String
  userId Int
  apfo   DateTime?
  mbaNumber String @default("")
  coFileNumbers String @default("")
  dldReviewer String @default("")
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientRef Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  comments Comment[]
  tasks Task[]
  apfos Apfo[]
}

model Apfo {
  id        Int      @id @default(autoincrement())
  date      DateTime
  item      String
  projectId Int
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id     Int    @id @default(autoincrement())
  email  String
  body   String
  projectId Int
  userId Int
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id          Int      @id @default(autoincrement())
  name        String
  companyName String?
  email       String
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects Project[]
}
